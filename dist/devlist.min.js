class API_Controller{constructor(){}profile=async function(t,i){if(!t||isNaN(t))throw new TypeError("profile method first argument must be a user ID");t=await fetch("https://dlist.dev/api/profile/"+t).then(t=>t.json());return!t.message&&(i?t[i]:t)};exists=async function(t){if(!t||isNaN(t))throw new TypeError("exists method first argument must be a user ID");t=await fetch(`https://dlist.dev/api/profile/${t}/exists`).then(t=>t.json());return!t.message&&t};slug=async function(t){if(!t)throw new TypeError("slug method first argument must be a slug or vanity url");return t=(t=(t=t.split("www.devlist.vip/").join("").split("devlist.vip/").join("").split("https://").join("").split("http://").join("")).split("www.devlist.me/").join("").split("devlist.me/").join("").split("https://").join("").split("http://").join("")).split("www.dlist.me/").join("").split("dlist.me/").join("").split("https://").join("").split("http://").join(""),(await fetch("https://dlist.dev/api/slug/"+t).then(t=>t.json())).user};widget=async function(t){if(!t||isNaN(t))throw new TypeError("widget method first argument must be a user ID");if(!await this.exists(t))return!1;t=`https://dlist.dev/api/profile/${t}/widget.png`;return{link:t,buffer:await fetch(t).then(t=>t.buffer())}}}const devlist={API_Controller:API_Controller};